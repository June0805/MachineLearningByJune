import numpy as np
np.random.seed(1337)
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pylab as plt


x = np.linspace(-1, 1, 200)
np.random.shuffle(x)  
y = 0.5 * x + 2 + np.random.normal(0, 0.05, (200, ))
plt.scatter(x, y)
plt.show()

X_train, Y_train = x[:160], y[:160]
X_test, Y_test = x[160:], y[160:]

model = Sequential()
model.add(Dense(units=1, input_dim=1))

model.compile(loss='mse', optimizer='sgd')

print('Training-------------------')
for step in range(301):
    cost = model.train_on_batch(X_train, Y_train)
    if step % 100== 0:
        print('train costï¼š', cost)

print('!\nTest------------------')
cost = model.evaluate(X_test, Y_test, batch_size=40)
print('test cost:', cost)
w, b=model.layers[0].get_weights()
print('weights:', w, '\nbiases:', b)

y_pred = model.predict(X_test)
plt.scatter(X_test, Y_test)
plt.plot(X_test, y_pred)
plt.show()
